{"version":3,"sources":["../../../src/components/mocker/index.js"],"names":["getFakerMethod","path","faker","createEnum","enumElements","createDate","date","between","Date","createBoolean","random","boolean","createImageLink","provider","width","height","replace","String","createNumber","min","max","options","number","createString","format","wordsCount","int","fakerMethod","words","slice","isNumber","type","extractImageSize","split","map","Number","createFakeData","imageProvider","minimum","maximum","minLength","maxLength","rest","enum","test","generateArrayItems","minItems","maxItems","items","arrayLength","Array","fill","createMockGenerator","model"],"mappings":"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","sourcesContent":["import faker from \"faker\";\nimport random from \"random\";\nimport { objectPath, randomElement } from \"../utils\";\nimport { getResponseModel, processor } from \"../parser\";\nimport type { Schema } from \"openapi3-flowtype-definition\";\n\ntype Config = {\n  imageProvider: string\n};\n\nconst getFakerMethod = (path: string) => objectPath(faker, path);\n\nconst createEnum = (enumElements: Array<string | number | boolean>) =>\n  randomElement(enumElements);\nconst createDate = () =>\n  faker.date.between(new Date(\"2015-01-01\"), new Date(\"2021-01-01\"));\nconst createBoolean = () => random.boolean();\nconst createImageLink = (\n  provider: string,\n  width?: number = 200,\n  height?: number = 300\n) =>\n  provider\n    .replace(\"<width>\", String(width))\n    .replace(\"<height>\", String(height));\nconst createNumber = (min: number = 0, max: number = 9999999) => {\n  const options = { min, max };\n  return faker.random.number(options);\n};\nconst createString = (format: string = \"random.words\") => (\n  min: number,\n  max: number\n) => {\n  const wordsCount: number = random.int(min, max);\n  const fakerMethod = getFakerMethod(format);\n  const words = fakerMethod(wordsCount);\n  return words.slice(0, max);\n};\n\nconst isNumber = (type: string): boolean =>\n  type === \"number\" || type === \"integer\";\n\nconst extractImageSize = (format: string): number[] =>\n  format\n    .replace(/^image\\[(\\d+x\\d+)\\]/g, \"$1\")\n    .split(\"x\")\n    .map(Number);\n\nconst createFakeData = ({ imageProvider }: Config) => ({\n  type,\n  format,\n  minimum = 0,\n  maximum = 99999999,\n  minLength = 0,\n  maxLength = 500,\n  ...rest\n}: Schema) => {\n  if (rest.enum) {\n    return createEnum(rest.enum);\n  }\n  if (\"nullable\" in rest && random.boolean()) {\n    return null;\n  }\n\n  if (format === \"date\") {\n    return createDate();\n  }\n  if (/^image\\[\\d+x\\d+\\]/.test(format)) {\n    const [width, height] = extractImageSize(format);\n    return createImageLink(imageProvider, width, height);\n  }\n\n  if (/^image/.test(format)) {\n    return createImageLink(imageProvider);\n  }\n\n  if (type === \"string\") {\n    return createString(format)(minLength, maxLength);\n  }\n  if (isNumber(type)) {\n    return createNumber(minimum, maximum);\n  }\n  if (type === \"boolean\") {\n    return createBoolean();\n  }\n};\n\nconst generateArrayItems = ({ minItems = 0, maxItems = 15, items }: Schema) => {\n  const arrayLength = random.int(minItems, maxItems);\n  return new Array(arrayLength).fill(items);\n};\n\nexport const createMockGenerator: (cfg: Config) => (model: Schema) => any = ({\n  imageProvider\n}) => model => {\n  return processor(\n    createFakeData({ imageProvider }),\n    { items: generateArrayItems },\n    getResponseModel(model)\n  );\n};\n"],"file":"index.js"}